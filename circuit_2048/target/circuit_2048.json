{"noir_version":"1.0.0-beta.9+6abff2f16e1c1314ba30708d1cf032a536de3d19","hash":"15129940340614629231","abi":{"parameters":[{"name":"final_score","type":{"kind":"field"},"visibility":"public"},{"name":"total_moves","type":{"kind":"field"},"visibility":"private"},{"name":"actual_moves","type":{"kind":"field"},"visibility":"private"},{"name":"actual_score","type":{"kind":"field"},"visibility":"private"},{"name":"address","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/82YQW6rMBCGbTBNSNrX6DW9h40hmB2LvsXrLUgDUjdVVfUAPXqL6iGTiasuGEv5pciAnW9+T4ZJiBTfyvxrlPJjIn5W60c9U5gpedlGRfI5KSGGrd6VZV8XvbGm00Wzd5Uuq/3OGWcqVx0KZ23vSlc3+6bWjSltb4aqsQMKwrX5NNLm6Z71PBnJmL+Ecc/KF6Q8/9gvulCx3yym4QwF4voAR5/QfVLkPfHnuCMpcS6Yf/RjTq5Lz2mZ8pAjLjff6XKXk/0x+7c5YkbgF8BXcfh64TkPH6d8QeKmZB19z6gbcX7DwxqYw/X3z88tv15/xPH41h/nhBejNrAn7tzeBfxDrLXf6wPZK869ZPNS70N1xMcvpjrNovB3k/+rOPwG+Is4/B74yzj8Evh5FL7tgL+K43+6F9dx+BXwr+Pwn4B/E4VfH6B/Qp+EGEIce8ctus7Xx4yRJJ4Qp31KkPgr4pX7N4Mk8cAPzQ/0WsjdJuB1E5ijPXgTiLMJxAmxFCMrY2RdMbIWjKwlI4sz9/mF+loxsjhrYs3IumZkXWp9wfdG6HfgqNaPeqYk8Y69hnrnmHvoO69vzy/vggiDJDIM5wmZUygJeF36A0/8wpcB1qixAOGmVR+ncVp/Xc9Q7Y7/FKSen4njPrAUmsfr//tzfBPDOOcfjaHuzGC7oau6w6F86v4S/qgkkCcY7wV/vjR62N/G4U8Ps1j36HhL9okfRlsmD8CDOsjEuRIyB2uXxJ/k92cEURqIBbrz4xZdg3x+AuuWcjj3FgAA","debug_symbols":"tdTRboIwFAbgd+k1F7Q9p0VfxRiDWg1JA6TCksXw7jv1B6dZXBaT3fCL8H8UWriqY9iP513TnrqLWm+uap+aGJvzLnaHemi6Vv69qjJvtFNrXSjtERVidQtTIjTCICyCEIyAYqAYKAaKhWKhWCgWioVioVgoFoqFYqEQFIJCUAgKQSEoBIWgEBSCwlAYCkNhKAyFoTAUhsJQGIqD4qA4KA6KE8VIMEIUM02FWh78bkgh5Of+MBMyP32dQjuodTvGWKiPOo63ky593d5yqJMcLQsV2qOkgKcmhvxrKr7b5euqLm01t3Xp9R0w5q+CJz8Dvirf6FteBmC9uff5+Q7sf94BaZoBIv1qBL/1mZd+Zd7pr9zc57J66m9lrz406cf7KQOWRSaXlTUmZVliMgmywvyUL5Oaeh9DPjdrY3tYqrI7fPbLkeXl71N3CMcxhXyZhy+AbDeuKrzdTnkoXw==","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\n#[deprecated(\"This functions is deprecated in favour of external verification libraries. To verify Barretenberg proofs, it's recommended to use the library https://github.com/AztecProtocol/aztec-packages/tree/next/barretenberg/noir/bb_proof_verification\")]\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\n/// Asserts the validity of the provided proof and public inputs against the provided verification key and hash.\n///\n/// The ACVM cannot determine whether the provided proof is valid during execution as this requires knowledge of\n/// the backend against which the program is being proven. However if an invalid proof if submitted, the program may\n/// fail to prove or the backend may generate a proof which will subsequently fail to verify.\n///\n/// # Important Note\n///\n/// If you are not developing your own backend such as [Barretenberg](https://github.com/AztecProtocol/barretenberg)\n/// you probably shouldn't need to interact with this function directly. It's easier and safer to use a verification\n/// library which is published by the developers of the backend which will document or enforce any safety requirements.\n///\n/// If you use this directly, you're liable to introduce underconstrainedness bugs and *your circuit will be insecure*.\n///\n/// # Arguments\n/// - verification_key: The verification key of the circuit to be verified.\n/// - proof: The proof to be verified.\n/// - public_inputs: The public inputs associated with `proof`\n/// - key_hash: The hash of `verification_key` of the form expected by the backend.\n/// - proof_type: An identifier for the proving scheme used to generate the proof to be verified. This allows\n///               for a single backend to support verifying multiple proving schemes.\n///\n/// # Constraining `key_hash`\n///\n/// The Noir compiler does not by itself constrain that `key_hash` is a valid hash of `verification_key`.\n/// This is because different backends may differ in how they hash their verification keys.\n/// It is then the responsibility of either the noir developer (by explicitly hashing the verification key\n/// in the correct manner) or by the proving system itself internally asserting the correctness of `key_hash`.\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"pub fn main(\n    final_score: pub Field,     // Public: claimed final score\n    total_moves: Field,         // Private: claimed number of moves\n    actual_moves: Field,        // Private: actual number of moves (<= 100)\n    actual_score: Field,        // Private: actual score\n    address: pub Field          // Public: wallet address (as Field)\n) {\n   \n    print(address);\n    // Check the final score\n    assert(actual_score == final_score);\n    assert(total_moves == actual_moves);\n    assert(address != 0);  // Ensure address is not zero\n}","path":"/Users/shivanshgupta/Desktop/2048-NextJs/circuit_2048/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","directive_invert"]}