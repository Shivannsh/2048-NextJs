{
  "noir_version": "1.0.0-beta.7+24c053fba747770cf8d3f813d22cfa003714dfb6",
  "hash": "15324491255735636456",
  "abi": {
    "parameters": [
      {
        "name": "final_score",
        "type": { "kind": "field" },
        "visibility": "public"
      },
      {
        "name": "total_moves",
        "type": { "kind": "field" },
        "visibility": "public"
      },
      {
        "name": "actual_moves",
        "type": { "kind": "field" },
        "visibility": "private"
      },
      {
        "name": "actual_score",
        "type": { "kind": "field" },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/7WSSwqAMAxE2+qBkiaxyc6rWKz3P4KKCuJnZX0QAlkMPDLebTTLBHfnuPX7JuiYS4oFCQeIllWAJXeKiqIyRiUqyposWwJDpoKTGE2w4U9Z8A0M9bLgT2dX0bmp6Lz+or04h4cuePfODH8G4u9AAgAA",
  "debug_symbols": "jZDRCoMwDEX/Jc99ULdO7K+MIbVGKZS21HYwxH9fFLvpw2BPaXJ7bsidoccuja22g5tA3GfogjZGj61xSkbtLE3nhUFu2xgQaQQHnSgvA9oIwiZjGDylSdunyUu71SgDqQUDtD1VMhy0wfW1sC9d/EavzW2HeXX54Pxvntd5OW/qE/+gTiodThdDAaJkUIKoltU0aNkZ3LMYklWHaOLLZyWH54NT2KeAq+mm0Zo3",
  "file_map": {
    "50": {
      "source": "use dep::std;\n\npub fn main(\n        // Public: hash of the moves array\n    final_score: pub Field,     // Public: claimed final score\n    total_moves: pub Field,     // Public: claimed number of moves  // Private: the moves array (padded with 0s if less than 100)\n    actual_moves: Field,        // Private: actual number of moves (<= 100)\n    actual_score: Field         // Private: actual score\n) {\n    // 1. Check the hash of the moves array\n   \n    // 2. Check the number of moves\n    assert(actual_moves == total_moves);\n\n    // 3. Check the final score\n    assert(actual_score == final_score);\n\n    // (Optional) You could replay the moves here to compute actual_score, but that's complex.\n    // For now, you just prove knowledge of a moves array with the claimed hash, score, and move count.\n}\n\n// #[test]\n// fn test_valid_game_proof() {\n//     let mut moves_array: [Field; 1000] = [0; 1000];\n//     moves_array[0] = 1; // Example move 1\n//     moves_array[1] = 2; // Example move 2\n//     moves_array[2] = 3; // Example move 3\n\n//     let computed_hash_for_test = std::hash::pedersen_hash(moves_array);\n//     let claimed_final_score = 100;\n//     let claimed_total_moves = 3;\n\n//     main(\n//         computed_hash_for_test,\n//         claimed_final_score,\n//         claimed_total_moves,\n//         moves_array,\n//         claimed_total_moves,\n//         claimed_final_score\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_invalid_score() {\n//     let mut moves_array: [Field; 1000] = [0; 1000];\n//     moves_array[0] = 1;\n\n//     let expected_hash = std::hash::pedersen_hash(moves_array);\n//     let claimed_final_score = 99; // Incorrect score\n//     let claimed_total_moves = 1;\n\n//     main(\n//         expected_hash,\n//         claimed_final_score,\n//         claimed_total_moves,\n//         moves_array,\n//         1, // Actual moves\n//         100 // Actual score\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_invalid_moves_count() {\n//     let mut moves_array: [Field; 1000] = [0; 1000];\n//     moves_array[0] = 1;\n\n//     let expected_hash = std::hash::pedersen_hash(moves_array);\n//     let claimed_final_score = 100;\n//     let claimed_total_moves = 2; // Incorrect moves count\n\n//     main(\n//         expected_hash,\n//         claimed_final_score,\n//         claimed_total_moves,\n//         moves_array,\n//         1, // Actual moves\n//         100 // Actual score\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_invalid_moves_hash() {\n//     let mut moves_array: [Field; 1000] = [0; 1000];\n//     moves_array[0] = 1;\n\n//     let mut tampered_moves_array: [Field; 1000] = [0; 1000];\n//     tampered_moves_array[0] = 2; // Tampered move\n\n//     let expected_hash = std::hash::pedersen_hash(tampered_moves_array); // Hash of tampered moves\n//     let claimed_final_score = 100;\n//     let claimed_total_moves = 1;\n\n//     main(\n//         expected_hash,\n//         claimed_final_score,\n//         claimed_total_moves,\n//         moves_array, // Original moves array\n//         1,\n//         100\n//     );\n// }\n",
      "path": "/home/gautam/Desktop/2048-NextJs/circuit_2048/src/main.nr"
    }
  },
  "names": ["main"],
  "brillig_names": []
}
